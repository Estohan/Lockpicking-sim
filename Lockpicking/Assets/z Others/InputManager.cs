//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/z Others/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""Lockpicking"",
            ""id"": ""52b6e5ca-c705-4a2c-a887-f68e43bbc35f"",
            ""actions"": [
                {
                    ""name"": ""RotateWrench"",
                    ""type"": ""Button"",
                    ""id"": ""9abd3a3f-39ac-4959-bdb4-079780977076"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StartPinPush"",
                    ""type"": ""Button"",
                    ""id"": ""56d7b6ab-e7c5-460f-9384-7621dfebc7d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeTumbler"",
                    ""type"": ""Value"",
                    ""id"": ""d36760e2-284f-4049-8984-a1f59c3f1665"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Normalize(min=-120,max=120)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PushPin"",
                    ""type"": ""Value"",
                    ""id"": ""20dde639-15f6-4bab-818c-06803e5e303a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Clamp(min=-100,max=100)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bb5a7e6e-5b78-4734-b4bd-61c07b43b9ae"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateWrench"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e29f1023-3ab1-441b-ab33-a0d2e72aeffd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartPinPush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63281f99-c9c7-499b-b4f5-65b4e9050954"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeTumbler"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c4c85ac-9574-4cb6-b497-744e52c0e67f"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PushPin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Lockpicking
        m_Lockpicking = asset.FindActionMap("Lockpicking", throwIfNotFound: true);
        m_Lockpicking_RotateWrench = m_Lockpicking.FindAction("RotateWrench", throwIfNotFound: true);
        m_Lockpicking_StartPinPush = m_Lockpicking.FindAction("StartPinPush", throwIfNotFound: true);
        m_Lockpicking_ChangeTumbler = m_Lockpicking.FindAction("ChangeTumbler", throwIfNotFound: true);
        m_Lockpicking_PushPin = m_Lockpicking.FindAction("PushPin", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Lockpicking
    private readonly InputActionMap m_Lockpicking;
    private ILockpickingActions m_LockpickingActionsCallbackInterface;
    private readonly InputAction m_Lockpicking_RotateWrench;
    private readonly InputAction m_Lockpicking_StartPinPush;
    private readonly InputAction m_Lockpicking_ChangeTumbler;
    private readonly InputAction m_Lockpicking_PushPin;
    public struct LockpickingActions
    {
        private @InputManager m_Wrapper;
        public LockpickingActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateWrench => m_Wrapper.m_Lockpicking_RotateWrench;
        public InputAction @StartPinPush => m_Wrapper.m_Lockpicking_StartPinPush;
        public InputAction @ChangeTumbler => m_Wrapper.m_Lockpicking_ChangeTumbler;
        public InputAction @PushPin => m_Wrapper.m_Lockpicking_PushPin;
        public InputActionMap Get() { return m_Wrapper.m_Lockpicking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LockpickingActions set) { return set.Get(); }
        public void SetCallbacks(ILockpickingActions instance)
        {
            if (m_Wrapper.m_LockpickingActionsCallbackInterface != null)
            {
                @RotateWrench.started -= m_Wrapper.m_LockpickingActionsCallbackInterface.OnRotateWrench;
                @RotateWrench.performed -= m_Wrapper.m_LockpickingActionsCallbackInterface.OnRotateWrench;
                @RotateWrench.canceled -= m_Wrapper.m_LockpickingActionsCallbackInterface.OnRotateWrench;
                @StartPinPush.started -= m_Wrapper.m_LockpickingActionsCallbackInterface.OnStartPinPush;
                @StartPinPush.performed -= m_Wrapper.m_LockpickingActionsCallbackInterface.OnStartPinPush;
                @StartPinPush.canceled -= m_Wrapper.m_LockpickingActionsCallbackInterface.OnStartPinPush;
                @ChangeTumbler.started -= m_Wrapper.m_LockpickingActionsCallbackInterface.OnChangeTumbler;
                @ChangeTumbler.performed -= m_Wrapper.m_LockpickingActionsCallbackInterface.OnChangeTumbler;
                @ChangeTumbler.canceled -= m_Wrapper.m_LockpickingActionsCallbackInterface.OnChangeTumbler;
                @PushPin.started -= m_Wrapper.m_LockpickingActionsCallbackInterface.OnPushPin;
                @PushPin.performed -= m_Wrapper.m_LockpickingActionsCallbackInterface.OnPushPin;
                @PushPin.canceled -= m_Wrapper.m_LockpickingActionsCallbackInterface.OnPushPin;
            }
            m_Wrapper.m_LockpickingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RotateWrench.started += instance.OnRotateWrench;
                @RotateWrench.performed += instance.OnRotateWrench;
                @RotateWrench.canceled += instance.OnRotateWrench;
                @StartPinPush.started += instance.OnStartPinPush;
                @StartPinPush.performed += instance.OnStartPinPush;
                @StartPinPush.canceled += instance.OnStartPinPush;
                @ChangeTumbler.started += instance.OnChangeTumbler;
                @ChangeTumbler.performed += instance.OnChangeTumbler;
                @ChangeTumbler.canceled += instance.OnChangeTumbler;
                @PushPin.started += instance.OnPushPin;
                @PushPin.performed += instance.OnPushPin;
                @PushPin.canceled += instance.OnPushPin;
            }
        }
    }
    public LockpickingActions @Lockpicking => new LockpickingActions(this);
    public interface ILockpickingActions
    {
        void OnRotateWrench(InputAction.CallbackContext context);
        void OnStartPinPush(InputAction.CallbackContext context);
        void OnChangeTumbler(InputAction.CallbackContext context);
        void OnPushPin(InputAction.CallbackContext context);
    }
}
